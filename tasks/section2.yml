---
# tasks file for ansible-docker

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible"
  when:
    - cis_docker_rule_2_1
  tags:
    - rule_2_1
  notify:
    - Restart docker-service
  block:
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | install dependencies"
      ansible.builtin.apt:
        name:
          - uidmap
          - dbus-user-session
          - docker-ce-rootless-extras
        state: present
        force_apt_get: true # apt-get instead of aptitude
        update_cache: true
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | expose privileged ports (< 1024) - CAP_NET_BIND_SERVICE on rootlesskit"
      community.general.capabilities:
        path: /usr/bin/rootlesskit
        capability: cap_net_bind_service=ep
        state: present
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | add to subuid '{{ cis_docker_user_default }}'"
      ansible.builtin.lineinfile:
        dest: /etc/subuid
        regexp: "{{ cis_docker_regex_base_search }}{{ cis_docker_user_default }}{{ cis_docker_regex_base_search_end }}"
        line: "{{ cis_docker_user_default }}:100000:65536"
        state: present
        mode: "0644"
        create: true
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | add to subgid '{{ cis_docker_user_default }}'"
      ansible.builtin.lineinfile:
        dest: /etc/subgid
        regexp: "{{ cis_docker_regex_base_search }}{{ cis_docker_user_default }}{{ cis_docker_regex_base_search_end }}"
        line: "{{ cis_docker_user_default }}:100000:65536"
        state: present
        mode: "0644"
        create: true
    # .......................................
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | stop docker.socket root service"
      ansible.builtin.service:
        name: docker.socket
        state: stopped
        enabled: false
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | stop docker.service root service"
      ansible.builtin.service:
        name: docker.service
        state: stopped
        enabled: false
    # .......................................
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | run dockerd-rootless-setuptool.sh as user {{ cis_docker_user_default }}"
      ansible.builtin.command: "loginctl enable-linger {{ cis_docker_user_default }}"
      changed_when: false
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | get user uid for {{ cis_docker_user_default }}"
      ansible.builtin.getent:
        database: passwd
        key: "{{ cis_docker_user_default }}"
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | set env XDG_RUNTIME_DIR + DOCKER_HOST"
      become: true
      become_user: "{{ cis_docker_user_default }}"
      ansible.builtin.lineinfile:
        dest: ~/.bashrc
        regexp: "{{ cis_docker_regex_base_search }}{{ item.key }}{{ cis_docker_regex_base_search_end }}"
        line: "{{ item.key }}={{ item.value }}"
        state: present
        mode: "0644"
        create: true
      with_items:
        - key: export XDG_RUNTIME_DIR
          value: "/run/user/{{ getent_passwd[cis_docker_user_default][1] }}"
        - key: export DOCKER_HOST
          value: "unix:///run/user/{{ getent_passwd[cis_docker_user_default][1] }}/docker.sock"
    # .......................................
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | reboot system after stop docker"
      ansible.builtin.reboot:
    # .......................................
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | run dockerd-rootless-setuptool.sh as user {{ cis_docker_user_default }}"
      become: true
      become_user: "{{ cis_docker_user_default }}"
      ansible.builtin.command: /usr/bin/dockerd-rootless-setuptool.sh install
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ getent_passwd[cis_docker_user_default][1] }}"
        DOCKER_HOST: "unix:///run/user/{{ getent_passwd[cis_docker_user_default][1] }}/docker.sock"
      changed_when: false
    # .......................................
    - name: "SECTION2 | 2.1 | Run the Docker daemon as a non-root user, if possible | set env DOCKER_HOST global"
      ansible.builtin.lineinfile:
        dest: /etc/environment
        regexp: "{{ cis_docker_regex_base_search }}DOCKER_HOST{{ cis_docker_regex_base_search_end }}"
        line: "DOCKER_HOST=unix:///run/user/{{ getent_passwd[cis_docker_user_default][1] }}/docker.sock"
        state: present
        mode: "0644"
        create: true

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.5 | Ensure insecure registries are not used"
  when:
    - cis_docker_rule_2_5
  tags:
    - rule_2_5
  block:
    - name: "SECTION2 | 2.5 | Ensure insecure registries are not used | get info"
      ansible.builtin.shell: >
        {% raw %}
        docker info --format 'Insecure Registries: {{.RegistryConfig.InsecureRegistryCIDRs}}'
        {% endraw %}
      args:
        executable: "{{ cis_docker_user_shell }}"
      register: cis_docker_2_5_insecure_registries
      changed_when: false
      failed_when: false
      check_mode: false
    - name: "SECTION2 | 2.5 | Ensure insecure registries are not used | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Ensure insecure registries are not used
          #############################################################################################
          {{ cis_docker_2_5_insecure_registries.stdout_lines | join(cis_docker_print_info_join_by) }}
          #############################################################################################

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.6 | Ensure aufs storage driver is not used"
  when:
    - cis_docker_rule_2_6
  tags:
    - rule_2_6
  block:
    - name: "SECTION2 | 2.6 | Ensure aufs storage driver is not used | get info"
      ansible.builtin.shell: >
        {% raw %}
        docker info --format 'Storage Driver: {{ .Driver }}'
        {% endraw %}
      args:
        executable: "{{ cis_docker_user_shell }}"
      register: cis_docker_2_6_storage_driver_used
      changed_when: false
      failed_when: false
      check_mode: false
    - name: "SECTION2 | 2.6 | Ensure aufs storage driver is not used | print info"
      ansible.builtin.debug:
        msg: |
          #############################################################################################
          Ensure aufs storage driver is not used.
          Do not explicitly use aufs as storage driver.
          #############################################################################################
          {{ cis_docker_2_6_storage_driver_used.stdout_lines | join(cis_docker_print_info_join_by) }}
          #############################################################################################

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.9 | Enable user namespace support"
  when:
    - cis_docker_rule_2_9
  tags:
    - rule_2_9
    - molecule-idempotence-notest
  block:
    - name: "SECTION2 | 2.9 | Enable user namespace support | touch /etc/subuid"
      ansible.builtin.file:
        path: /etc/subuid
        state: touch
        mode: "0644"
    - name: "SECTION2 | 2.9 | Enable user namespace support | touch /etc/subgid"
      ansible.builtin.file:
        path: /etc/subgid
        state: touch
        mode: "0644"

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.2-2.18 | daemon.json (ROOTLESS)"
  become: true
  become_user: "{{ cis_docker_user_default }}"
  when:
    - cis_docker_rule_2_1
  tags:
    - rule_2_2
    - rule_2_3
    - rule_2_4
    - rule_2_6
    - rule_2_7
    - rule_2_8
    - rule_2_9
    - rule_2_13
    - rule_2_14
    - rule_2_15
    - rule_2_16
    - rule_2_18
  notify:
    - Restart docker-service
  block:
    - name: "SECTION2 | 2.2-2.18 | daemon.json | create folder (ROOTLESS)"
      ansible.builtin.file:
        path: "{{ cis_docker_daemon_json_rootless }}"
        state: directory
        mode: "0750"
    - name: "SECTION2 | 2.2-2.18 | daemon.json | set conf's in file (ROOTLESS)"
      ansible.builtin.template:
        src: daemon.json.j2
        dest: "{{ cis_docker_daemon_json_rootless }}/daemon.json"
        owner: "{{ cis_docker_user_default }}"
        group: "{{ cis_docker_user_default }}"
        mode: "0640"

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.2-2.18 | daemon.json"
  when:
    - not cis_docker_rule_2_1
  tags:
    - rule_2_2
    - rule_2_3
    - rule_2_4
    - rule_2_6
    - rule_2_7
    - rule_2_8
    - rule_2_9
    - rule_2_13
    - rule_2_14
    - rule_2_15
    - rule_2_16
    - rule_2_18
  notify:
    - Restart docker-service
  block:
    - name: "SECTION2 | 2.2-2.18 | daemon.json | create folder"
      ansible.builtin.file:
        path: "{{ cis_docker_daemon_json_root }}"
        state: directory
        mode: "0750"
    - name: "SECTION2 | 2.2-2.18 | daemon.json | set conf's in file"
      ansible.builtin.template:
        src: daemon.json.j2
        dest: "{{ cis_docker_daemon_json_root }}/daemon.json"
        owner: root
        group: root
        mode: "0640"

# ------------------------------------------------------------------------------

- name: "SECTION2 | 2.2.* | restart docker-service (ROOTLESS)"
  become: true
  become_user: "{{ cis_docker_user_default }}"
  ansible.builtin.service:
    name: docker.service
    state: restarted
    enabled: true
  when:
    - cis_docker_rule_2_1
  tags:
    - rule_2
    - molecule-idempotence-notest

- name: "SECTION2 | 2.2.* | restart docker-service"
  ansible.builtin.service:
    name: docker.service
    state: restarted
    enabled: true
  when:
    - not cis_docker_rule_2_1
  tags:
    - rule_2
    - molecule-idempotence-notest
