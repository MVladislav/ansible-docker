---
# tasks file for roles/docker

# ------------------------------------------------------------------------------
- name: "DOCKER | 0.0.1 | INSTALL | Install docker dependencies"
  ansible.builtin.apt:
    pkg: "{{ docker_package_dependencies }}"
    state: present
    force_apt_get: true # apt-get instead of aptitude
    update_cache: true
  when: docker_package_dependencies is defined and (docker_package_dependencies | length>0)
  tags:
    - docker

# ------------------------------------------------------------------------------
- name: "DOCKER | 0.0.2 | INSTALL | add docker Apt signing key, will not download if present"
  ansible.builtin.shell: >
    set -o pipefail
    && curl -fsSL "{{ docker_install.gpg.url }}"
    | gpg --dearmor | tee "/etc/apt/trusted.gpg.d/{{ docker_install.gpg.name }}" >/dev/null
  args:
    executable: /bin/bash
  changed_when: false
  tags:
    - docker

- name: "DOCKER | 0.0.2 | INSTALL | get OS architecture"
  ansible.builtin.command: dpkg --print-architecture
  changed_when: false
  register: os_architecture
  tags:
    - docker

- name: "DOCKER | 0.0.2 | INSTALL | get OS distribution"
  ansible.builtin.set_fact:
    lsb_release: "{{ ansible_lsb.codename | lower }}"
  tags:
    - docker

- name: "DOCKER | 0.0.2 | INSTALL | check if Docker repository is available"
  ansible.builtin.uri:
    url: "https://download.docker.com/linux/ubuntu/dists/{{ lsb_release }}/{{ docker_install.version }}"
    return_content: true
  ignore_errors: true
  register: docker_repo_check
  tags:
    - docker

- name: DOCKER | 0.0.2 | INSTALL | choose fallback Docker repository
  ansible.builtin.set_fact:
    lsb_release: "{{ docker_install.release_fallback }}"
  when: docker_repo_check.status != 200 or lsb_release == docker_install.release_skip_lunar
  tags:
    - docker

- name: >
    DOCKER | 0.0.2 | INSTALL |
    add docker repository into sources list as:
    deb [arch={{ os_architecture.stdout }} signed-by=/etc/apt/trusted.gpg.d/{{ docker_install.gpg.name }}]
    {{ docker_install.repo }} {{ lsb_release }} {{ docker_install.version }}
  ansible.builtin.apt_repository:
    repo: >
      deb [arch={{ os_architecture.stdout }} signed-by=/etc/apt/trusted.gpg.d/{{ docker_install.gpg.name }}]
      {{ docker_install.repo }} {{ lsb_release }} {{ docker_install.version }}
    state: present
  tags:
    - docker

# ------------------------------------------------------------------------------
- name: "DOCKER | 0.0.3 | INSTALL | install docker packages (apt)"
  ansible.builtin.apt:
    pkg: "{{ docker_install.apt }}"
    state: present
    force_apt_get: true # apt-get instead of aptitude
    update_cache: true
  when:
    - docker_install.apt is not none
    - docker_install.apt | length>0
  tags:
    - docker

# ------------------------------------------------------------------------------
- name: "DOCKER | 0.0.4 | INSTALL | get list of outdated pip packages"
  ansible.builtin.shell: >
    set -o pipefail &&
    python3 -m pip list -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1
  args:
    executable: /bin/bash
  register: pip_outdated
  changed_when: pip_outdated.rc in [1]
  failed_when: pip_outdated.rc not in [0, 1]
  when:
    - docker_install is defined
    - docker_install.pip is defined
  tags:
    - docker

- name: "DOCKER | 0.0.4 | INSTALL | update all installed pip packages"
  ansible.builtin.pip:
    name: "{{ item }}"
    extra_args: --upgrade --break-system-packages
  with_items: "{{ pip_outdated.stdout_lines }}"
  when:
    - docker_install is defined
    - docker_install.pip is defined
  tags:
    - docker

- name: "DOCKER | 0.0.5 | INSTALL | install docker packages (pip)"
  ansible.builtin.pip:
    name: "{{ item }}"
    extra_args: --break-system-packages
    executable: pip3
  loop: "{{ docker_install.pip | flatten(levels=1) }}"
  when:
    - docker_install is defined
    - docker_install.pip is defined
    - docker_install.pip is not none
  tags:
    - docker
