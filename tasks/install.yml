---
# tasks file for ansible-docker

# ------------------------------------------------------------------------------

- name: "INSTALL | check python version for arg '--break-system-packages'"
  ansible.builtin.set_fact:
    py_extra_args: "--break-system-packages"
  when:
    - ansible_facts['python_version'] >= "3.11"
  tags:
    - install

# ------------------------------------------------------------------------------

- name: "INSTALL | install docker dependencies (apt)"
  ansible.builtin.apt:
    name: "{{ cis_docker_package_dependencies }}"
    state: present
    force_apt_get: true # apt-get instead of aptitude
    update_cache: true
  when:
    - cis_docker_package_dependencies is defined
    - cis_docker_package_dependencies is not none
  tags:
    - install

- name: "INSTALL | install docker dependencies (pip)"
  ansible.builtin.pip:
    name: "{{ item }}"
    extra_args: "{{ py_extra_args | default('') }}"
  loop: "{{ cis_docker_pip_dependencies | flatten(levels=1) }}"
  when:
    - cis_docker_pip_dependencies is defined
    - cis_docker_pip_dependencies is not none
  tags:
    - install

# ------------------------------------------------------------------------------

- name: "INSTALL | add docker apt signing key"
  ansible.builtin.get_url:
    url: "{{ cis_docker_install_gpg.url }}"
    dest: "{{ cis_docker_install_gpg.path }}/{{ cis_docker_install_gpg.name }}"
    mode: "0644"
    force: true
  tags:
    - install

- name: "INSTALL | get OS architecture"
  ansible.builtin.command: dpkg --print-architecture
  register: cis_docker_os_architecture
  changed_when: false
  check_mode: false
  tags:
    - install

- name: "INSTALL | get OS distribution"
  ansible.builtin.set_fact:
    cis_docker_os_distribution: "{{ ansible_lsb.codename | lower }}"
  tags:
    - install

- name: "INSTALL | check if Docker repository is available"
  ansible.builtin.uri:
    url: "https://download.docker.com/linux/ubuntu/dists/{{ cis_docker_os_distribution }}/{{ cis_docker_install_version }}"
    return_content: true
  register: docker_repo_check
  ignore_errors: true
  tags:
    - install

- name: "INSTALL | choose fallback Docker repository"
  ansible.builtin.set_fact:
    cis_docker_os_distribution: "{{ cis_docker_install_release_fallback }}"
  when:
    - cis_docker_install_release_fallback is defined
    - |
      (
        docker_repo_check is defined and
        docker_repo_check.status is defined and
        docker_repo_check.status != 200
      )
      or
      (
        cis_docker_os_distribution is defined and
        cis_docker_install_release_skip is defined and
        cis_docker_install_release_skip is not none and
        cis_docker_os_distribution == cis_docker_install_release_skip
      )
  tags:
    - install

- name: "INSTALL | add docker repository into sources list"
  ansible.builtin.apt_repository:
    repo: >
      deb [arch={{ cis_docker_os_architecture.stdout }} signed-by={{ cis_docker_install_gpg.path }}/{{ cis_docker_install_gpg.name }}]
      {{ cis_docker_install_repo }} {{ cis_docker_os_distribution }} {{ cis_docker_install_version }}
    state: present
    mode: "0644"
  tags:
    - install

# ------------------------------------------------------------------------------

- name: "INSTALL | install docker packages (apt)"
  ansible.builtin.apt:
    pkg: "{{ cis_docker_install_apt }}"
    state: present
    force_apt_get: true # apt-get instead of aptitude
    update_cache: true
  when:
    - cis_docker_install_apt is defined
    - cis_docker_install_apt is not none
  tags:
    - install

# ------------------------------------------------------------------------------

- name: "INSTALL | install docker packages (pip)"
  ansible.builtin.pip:
    name: "{{ item }}"
    extra_args: "{{ py_extra_args | default('') }}"
  loop: "{{ cis_docker_install_pip | flatten(levels=1) }}"
  when:
    - cis_docker_install_pip is defined
    - cis_docker_install_pip is not none
  tags:
    - install
